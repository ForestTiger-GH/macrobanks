# -*- coding: utf-8 -*-
"""
CBR timeseries archiver
–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ Excel-—Ñ–∞–π–ª—ã —Å —Å–∞–π—Ç–∞ –¶–ë –†–§ (–ø–æ–ª–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã, –Ω–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç—ã)
–∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –≤ –∞—Ä—Ö–∏–≤ —Å –∏–º–µ–Ω–µ–º YYYY-MM-DD.zip.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Jupyter –∏ Google Colab (–≤ Colab ‚Äî –∞–≤—Ç–æ-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞).
"""

import os
import re
import shutil
import zipfile
import datetime as dt
from typing import Iterable, Optional, List
from urllib.parse import urlparse

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# --- –°—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–∞–π–º—Å–µ—Ä–∏–∏ –¶–ë (–∏–ø–æ—Ç–µ–∫–∞ + –∫—Ä–µ–¥–∏—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è–º) ---
DEFAULT_URLS = [
    # –ö—Ä–µ–¥–∏—Ç—ã —Ñ–∏–∑–ª–∏—Ü
    "https://www.cbr.ru/vfs/statistics/BankSector/Mortgage/02_05_Debt_ind.xlsx",
    # –ò–ø–æ—Ç–µ–∫–∞ (–ø–æ–ª–Ω—ã–µ —Ä—è–¥—ã)
    "https://www.cbr.ru/vfs/statistics/banksector/mortgage/02_41_Mortgage_ihc.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Mortgage/02_02_Mortgage.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Mortgage/02_03_Scpa_mortgage.xlsx",
    # –ö—Ä–µ–¥–∏—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è–º (–ø–æ–ª–Ω—ã–µ —Ä—è–¥—ã)
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_01_A_New_loans_corp_by_activity.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_01_C_New_loans_corp_by_activity.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_02_A_Debt_corp_by_activity.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_02_C_Debt_corp_by_activity.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_11_Debt_sme.xlsx",
    "https://www.cbr.ru/vfs/statistics/BankSector/Loans_to_corporations/01_11_F_Debt_sme_by_activity.xlsx",
    # –î–æ–ª–≥–æ–≤—ã–µ –±—É–º–∞–≥–∏
    "https://www.cbr.ru/vfs/statistics/debt_securities/66-debt_securities.xlsx", 
    # –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–≤–æ–∫—É–ø–Ω—ã–µ
    "https://www.cbr.ru/vfs/statistics/BankSector/Borrowings/02_01_Funds_all.xlsx", 
    "https://www.cbr.ru/vfs/statistics/banksector/borrowings/02_29_Budget_all.xlsx", 
    # –î–æ–º–∞—à–Ω–∏–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞
    "https://cbr.ru/vfs/statistics/households/households_bm.xlsx",
    "https://cbr.ru/vfs/statistics/households/households_om.xlsx",
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "_new"
    "https://www.cbr.ru/Content/Document/File/115862/obs_tabl20%D1%81.xlsx",
]

USER_AGENT = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
)

def _requests_session() -> requests.Session:
    """–°–µ—Å—Å–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ –≤–µ–∂–ª–∏–≤—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."""
    s = requests.Session()
    retries = Retry(
        total=5, connect=5, read=5,
        backoff_factor=0.5,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=frozenset(["GET", "HEAD"]),
        raise_on_status=False,
    )
    adapter = HTTPAdapter(max_retries=retries, pool_connections=10, pool_maxsize=10)
    s.mount("https://", adapter)
    s.mount("http://", adapter)
    s.headers.update({"User-Agent": USER_AGENT})
    return s

def _filename_from_response(resp: requests.Response) -> Optional[str]:
    """–ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ Content-Disposition (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–∞–ª –ø–æ–¥—Å–∫–∞–∑–∫—É)."""
    cd = resp.headers.get("Content-Disposition", "") or resp.headers.get("content-disposition", "")
    if not cd:
        return None
    m = re.search(r'filename\*?=(?:UTF-8\'\')?"?([^";]+)"?', cd)
    if m:
        return os.path.basename(m.group(1))
    return None

def _basename_from_url(u: str) -> str:
    """–ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏)."""
    return os.path.basename(urlparse(u).path)

def _alt_variants(url: str) -> List[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã URL —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤:
    BankSector/banksector, Mortgage/mortgage, Loans_to_corporations/loans_to_corporations.
    –û—Ä–∏–≥–∏–Ω–∞–ª ‚Äî –ø–µ—Ä–≤—ã–º.
    """
    variants = []
    for b in ("BankSector", "banksector"):
        for m in ("Mortgage", "mortgage"):
            for l in ("Loans_to_corporations", "loans_to_corporations"):
                v = url
                v = re.sub(r"/[Bb]ank[Ss]ector/", f"/{b}/", v)
                v = re.sub(r"/[Mm]ortgage/", f"/{m}/", v)
                v = re.sub(r"/[Ll]oans_to_corporations/", f"/{l}/", v)
                if v not in variants:
                    variants.append(v)
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL —Å—Ç–æ–∏—Ç –ø–µ—Ä–≤—ã–º
    if url in variants:
        variants.remove(url)
    return [url] + variants

def _download_one(session: requests.Session, url: str, dest_dir: str) -> Optional[str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª, –ø—Ä–æ–±—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ.
    """
    candidates = _alt_variants(url)
    last_error = None

    for u in candidates:
        try:
            r = session.get(u, timeout=30, stream=True, allow_redirects=True)
            ctype = (r.headers.get("Content-Type") or "").lower()
            if r.status_code == 200 and "text/html" not in ctype:
                fname = _filename_from_response(r) or _basename_from_url(u) or "downloaded_file"

                # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è obs_tabl20—Å.xlsx
                if "obs_tabl20c" in fname.lower():
                    base, ext = os.path.splitext(fname)
                    fname = f"{base}new{ext}"

                out_path = os.path.join(dest_dir, fname)
                with open(out_path, "wb") as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {fname}  ‚Üê  {u}")
                return out_path
            else:
                last_error = f"HTTP {r.status_code}, Content-Type: {ctype or 'unknown'}"
        except Exception as e:
            last_error = str(e)

    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {url} (–ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error})")
    return None


def cbr_timeseries_archiver(
    urls: Optional[Iterable[str]] = None,
    archive_name: Optional[str] = None,
    work_dir: Optional[str] = None,
    auto_download_in_colab: bool = True,
) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¶–ë (–ø–æ–ª–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã) –∏ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö –≤ zip.
    :param urls: —Å–ø–∏—Å–æ–∫ URL; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é DEFAULT_URLS.
    :param archive_name: –∏–º—è –∞—Ä—Ö–∏–≤–∞; –ø–æ —É—Å–ª–æ–≤–∏—é ‚Äî 'YYYY-MM-DD.zip'.
    :param work_dir: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    :param auto_download_in_colab: –≤ Colab –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä.
    :return: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ zip-—Ñ–∞–π–ª—É.
    """
    urls = list(urls) if urls is not None else list(DEFAULT_URLS)

    # –ò–º—è –∞—Ä—Ö–∏–≤–∞ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
    if archive_name is None:
        archive_name = f"{dt.date.today():%Y-%m-%d}.zip"
        archive_name = "CBR Collected Series Files.zip"

    # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    if work_dir is None:
        stamp = dt.datetime.now().strftime("%Y%m%d_%H%M%S")
        work_dir = f"CBR_DL_{stamp}"
    os.makedirs(work_dir, exist_ok=True)

    session = _requests_session()

    saved_files: List[str] = []
    print("‚Äî –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¶–ë (—Ç–∞–π–º—Å–µ—Ä–∏–∏)‚Ä¶")
    for url in urls:
        path = _download_one(session, url, work_dir)
        if path:
            saved_files.append(path)

    if not saved_files:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫–∏ –∏ –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")

    # –£–ø–∞–∫–æ–≤–∫–∞ –≤ zip —Ä—è–¥–æ–º —Å —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    zip_path = os.path.abspath(archive_name)
    with zipfile.ZipFile(zip_path, "w", compression=zipfile.ZIP_DEFLATED) as zf:
        for f in saved_files:
            zf.write(f, arcname=os.path.basename(f))
    print(f"üì¶ –ì–æ—Ç–æ–≤ –∞—Ä—Ö–∏–≤: {zip_path}")

    # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    try:
        shutil.rmtree(work_dir)
    except Exception:
        pass

    # –ê–≤—Ç–æ-—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ Colab
    if auto_download_in_colab:
        try:
            from google.colab import files as gfiles  # type: ignore
            gfiles.download(zip_path)
        except Exception:
            pass  # –ù–µ Colab ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ

    return zip_path


# --- –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ ---
# cbr_timeseries_archiver()
